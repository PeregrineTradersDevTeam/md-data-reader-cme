from test_utils import sample_collection_from_test_files

def assert_row_0(row):
    assert(row['min_price_increment_mantissa'] == 0)
    assert(row['min_price_increment_exponent'] == -9)
    assert(row['display_factor_mantissa'] == 10000000)
    assert(row['display_factor_exponent'] == -9)
    assert(row['price_ratio_mantissa'] == None)
    assert(row['price_ratio_exponent'] == -9)
    assert(row['trading_reference_price_mantissa'] == None)
    assert(row['trading_reference_price_exponent'] == -9)
    assert(row['high_limit_price_mantissa'] == None)
    assert(row['high_limit_price_exponent'] == -9)
    assert(row['low_limit_price_mantissa'] == None)
    assert(row['low_limit_price_exponent'] == -9)
    assert(row['max_price_variation_mantissa'] == None)
    assert(row['max_price_variation_exponent'] == -9)
    assert(row['match_event_indicator'] == 0)
    assert(row['tot_num_reports'] == None)
    assert(row['security_update_action'] == 65)
    assert(row['last_update_time'] == 1559522386278447009)
    assert(row['md_security_trading_status'] == None)
    assert(row['appl_id'] == 311)
    assert(row['market_segment_id'] == 54)
    assert(row['md_security_trading_status'] == None)
    assert(row['underlying_product'] == None)
    assert(row['security_exchange'].decode() == "XCME")
    assert(row['security_group'].decode() == "1V")
    assert(row['symbol'].decode() == "UD:1V: GN 0603941003")
    assert(row['security_id'] == 941003)
    assert(row['security_id_source'] == 56)
    assert(row['security_type'].decode() == "OOF")
    assert(row['cfi_code'].decode() == "OMEFXS")
    assert(row['maturity_month_year_year'] == 2019)
    assert(row['maturity_month_year_month'] == 6)
    assert(row['maturity_month_year_day'] == 1)
    assert(row['maturity_month_year_week'] == None)
    assert(row['currency'].decode() == "USD")
    assert(row['security_sub_type'].decode() == "GN")
    assert(row['user_defined_instrument'] == 89)
    assert(row['match_algorithm'] == 70)
    assert(row['min_trade_vol'] == 1)
    assert(row['max_trade_vol'] == 3000)
    assert(row['price_display_format'] == None)
    assert(row['tick_rule'] == 4)
    assert(row['unit_of_measure'].decode() == "IPNT")
    assert(row['settl_price_type'] == -128)
    assert(row['open_interest_qty'] == None)
    assert(row['cleared_volume'] == None)
    assert(row['main_fraction'] == None)
    assert(row['sub_fraction'] == None)
    assert(row['trading_reference_date'] == None)

    assert(len(row['legs']) == 2)
    row_legs_0 = row['legs'][0]
    assert(row_legs_0['leg_security_id'] == 122359)
    assert(row_legs_0['leg_security_id_source'] == 56)
    assert(row_legs_0['leg_side'] == 1)
    assert(row_legs_0['leg_ratio_qty'] == 5)
    assert(row_legs_0['leg_price_mantissa'] == None)
    assert(row_legs_0['leg_price_exponent'] == -9)
    assert(row_legs_0['leg_option_delta_mantissa'] == None)
    assert(row_legs_0['leg_option_delta_exponent'] == -4)
    row_legs_1 = row['legs'][1]
    assert(row_legs_1['leg_security_id'] == 183301)
    assert(row_legs_1['leg_security_id_source'] == 56)
    assert(row_legs_1['leg_side'] == 2)
    assert(row_legs_1['leg_ratio_qty'] == 6)
    assert(row_legs_1['leg_price_mantissa'] == None)
    assert(row_legs_1['leg_price_exponent'] == -9)
    assert(row_legs_1['leg_option_delta_mantissa'] == None)
    assert(row_legs_1['leg_option_delta_exponent'] == -4)


    assert(len(row['events']) == 2)
    row_events_0 = row['events'][0]
    assert(row_events_0['event_type'] == 5)
    assert(row_events_0['event_time'] == 1559522386278000000)
    row_events_1 = row['events'][1]
    assert(row_events_1['event_type'] == 7)
    assert(row_events_1['event_time'] == 1559592000000000000)


    assert(len(row['md_feed_types']) == 1)
    row_md_feed_types_0 = row['md_feed_types'][0]
    assert(row_md_feed_types_0['md_feed_type'].decode() == "GBX")
    assert(row_md_feed_types_0['market_depth'] == 3)


    assert(len(row['inst_attrib']) == 1)
    row_inst_attrib_0 = row['inst_attrib'][0]
    assert(row_inst_attrib_0['inst_attrib_type'] == 24)
    assert(row_inst_attrib_0['inst_attrib_value'] == 288003)

    assert(len(row['lot_type_rules']) == 1)
    row_lot_type_rules_0 = row['lot_type_rules'][0]
    assert(row_lot_type_rules_0['lot_type'] == 2)
    assert(row_lot_type_rules_0['min_lot_size_mantissa'] == 10000)
    assert(row_lot_type_rules_0['min_lot_size_exponent'] == -4)


def assert_row_1(row):
    assert(row['min_price_increment_mantissa'] == 1000000000)
    assert(row['min_price_increment_exponent'] == -9)
    assert(row['display_factor_mantissa'] == 100000)
    assert(row['display_factor_exponent'] == -9)
    assert(row['price_ratio_mantissa'] == None)
    assert(row['price_ratio_exponent'] == -9)
    assert(row['trading_reference_price_mantissa'] == None)
    assert(row['trading_reference_price_exponent'] == -9)
    assert(row['high_limit_price_mantissa'] == None)
    assert(row['high_limit_price_exponent'] == -9)
    assert(row['low_limit_price_mantissa'] == None)
    assert(row['low_limit_price_exponent'] == -9)
    assert(row['max_price_variation_mantissa'] == None)
    assert(row['max_price_variation_exponent'] == -9)
    assert(row['match_event_indicator'] == 0)
    assert(row['tot_num_reports'] == None)
    assert(row['security_update_action'] == 65)
    assert(row['last_update_time'] == 1559521848455443129)
    assert(row['md_security_trading_status'] == None)
    assert(row['appl_id'] == 315)
    assert(row['market_segment_id'] == 88)
    assert(row['md_security_trading_status'] == None)
    assert(row['underlying_product'] == None)
    assert(row['security_exchange'].decode() == "XCME")
    assert(row['security_group'].decode() == "2B")
    assert(row['symbol'].decode() == "UD:2B: VT 0603964879")
    assert(row['security_id'] == 964879)
    assert(row['security_id_source'] == 56)
    assert(row['security_type'].decode() == "OOF")
    assert(row['cfi_code'].decode() == "OMEFXS")
    assert(row['maturity_month_year_year'] == 2019)
    assert(row['maturity_month_year_month'] == 6)
    assert(row['maturity_month_year_day'] == 1)
    assert(row['maturity_month_year_week'] == None)
    assert(row['currency'].decode() == "USD")
    assert(row['security_sub_type'].decode() == "VT")
    assert(row['user_defined_instrument'] == 89)
    assert(row['match_algorithm'] == 70)
    assert(row['min_trade_vol'] == 1)
    assert(row['max_trade_vol'] == 9999)
    assert(row['price_display_format'] == None)
    assert(row['tick_rule'] == None)
    assert(row['unit_of_measure'].decode() == "GBP")
    assert(row['settl_price_type'] == -128)
    assert(row['open_interest_qty'] == None)
    assert(row['cleared_volume'] == None)
    assert(row['main_fraction'] == None)
    assert(row['sub_fraction'] == None)
    assert(row['trading_reference_date'] == None)

    assert(len(row['legs']) == 2)
    row_legs_0 = row['legs'][0]
    assert(row_legs_0['leg_security_id'] == 171742)
    assert(row_legs_0['leg_security_id_source'] == 56)
    assert(row_legs_0['leg_side'] == 1)
    assert(row_legs_0['leg_ratio_qty'] == 1)
    assert(row_legs_0['leg_price_mantissa'] == None)
    assert(row_legs_0['leg_price_exponent'] == -9)
    assert(row_legs_0['leg_option_delta_mantissa'] == None)
    assert(row_legs_0['leg_option_delta_exponent'] == -4)
    row_legs_1 = row['legs'][1]
    assert(row_legs_1['leg_security_id'] == 520856)
    assert(row_legs_1['leg_security_id_source'] == 56)
    assert(row_legs_1['leg_side'] == 2)
    assert(row_legs_1['leg_ratio_qty'] == 1)
    assert(row_legs_1['leg_price_mantissa'] == None)
    assert(row_legs_1['leg_price_exponent'] == -9)
    assert(row_legs_1['leg_option_delta_mantissa'] == None)
    assert(row_legs_1['leg_option_delta_exponent'] == -4)



    assert(len(row['events']) == 2)
    row_events_0 = row['events'][0]
    assert(row_events_0['event_type'] == 5)
    assert(row_events_0['event_time'] == 1559521848455000000)
    row_events_1 = row['events'][1]
    assert(row_events_1['event_type'] == 7)
    assert(row_events_1['event_time'] == 1559934000000000000)

    assert(len(row['md_feed_types']) == 2)
    row_md_feed_types_0 = row['md_feed_types'][0]
    assert(row_md_feed_types_0['md_feed_type'].decode() == "GBX")
    assert(row_md_feed_types_0['market_depth'] == 3)
    row_md_feed_types_1 = row['md_feed_types'][1]
    assert(row_md_feed_types_1['md_feed_type'].decode() == "GBI")
    assert(row_md_feed_types_1['market_depth'] == 1)


    assert(len(row['inst_attrib']) == 1)
    row_inst_attrib_0 = row['inst_attrib'][0]
    assert(row_inst_attrib_0['inst_attrib_type'] == 24)
    assert(row_inst_attrib_0['inst_attrib_value'] == 811015)

    assert(len(row['lot_type_rules']) == 2)
    row_lot_type_rules_0 = row['lot_type_rules'][0]
    assert(row_lot_type_rules_0['lot_type'] == 2)
    assert(row_lot_type_rules_0['min_lot_size_mantissa'] == 10000)
    assert(row_lot_type_rules_0['min_lot_size_exponent'] == -4)
    row_lot_type_rules_1 = row['lot_type_rules'][1]
    assert(row_lot_type_rules_1['lot_type'] == 3)
    assert(row_lot_type_rules_1['min_lot_size_mantissa'] == 2500000)
    assert(row_lot_type_rules_1['min_lot_size_exponent'] == -4)


def assert_row_2(row):
    assert(row['min_price_increment_mantissa'] == 0)
    assert(row['min_price_increment_exponent'] == -9)
    assert(row['display_factor_mantissa'] == 10000000)
    assert(row['display_factor_exponent'] == -9)
    assert(row['price_ratio_mantissa'] == None)
    assert(row['price_ratio_exponent'] == -9)
    assert(row['trading_reference_price_mantissa'] == None)
    assert(row['trading_reference_price_exponent'] == -9)
    assert(row['high_limit_price_mantissa'] == None)
    assert(row['high_limit_price_exponent'] == -9)
    assert(row['low_limit_price_mantissa'] == None)
    assert(row['low_limit_price_exponent'] == -9)
    assert(row['max_price_variation_mantissa'] == None)
    assert(row['max_price_variation_exponent'] == -9)
    assert(row['match_event_indicator'] == 0)
    assert(row['tot_num_reports'] == None)
    assert(row['security_update_action'] == 65)
    assert(row['last_update_time'] == 1559522218774443805)
    assert(row['md_security_trading_status'] == None)
    assert(row['appl_id'] == 311)
    assert(row['market_segment_id'] == 54)
    assert(row['md_security_trading_status'] == None)
    assert(row['underlying_product'] == None)
    assert(row['security_exchange'].decode() == "XCME")
    assert(row['security_group'].decode() == "1V")
    assert(row['symbol'].decode() == "UD:1V: GN 0603940993")
    assert(row['security_id'] == 940993)
    assert(row['security_id_source'] == 56)
    assert(row['security_type'].decode() == "OOF")
    assert(row['cfi_code'].decode() == "OMAFXS")
    assert(row['maturity_month_year_year'] == 2019)
    assert(row['maturity_month_year_month'] == 12)
    assert(row['maturity_month_year_day'] == 1)
    assert(row['maturity_month_year_week'] == None)
    assert(row['currency'].decode() == "USD")
    assert(row['security_sub_type'].decode() == "GN")
    assert(row['user_defined_instrument'] == 89)
    assert(row['match_algorithm'] == 70)
    assert(row['min_trade_vol'] == 1)
    assert(row['max_trade_vol'] == 3000)
    assert(row['price_display_format'] == None)
    assert(row['tick_rule'] == 4)
    assert(row['unit_of_measure'].decode() == "IPNT")
    assert(row['settl_price_type'] == -128)
    assert(row['open_interest_qty'] == None)
    assert(row['cleared_volume'] == None)
    assert(row['main_fraction'] == None)
    assert(row['sub_fraction'] == None)
    assert(row['trading_reference_date'] == None)

    assert(len(row['legs']) == 4)
    row_legs_0 = row['legs'][0]
    assert(row_legs_0['leg_security_id'] == 80502)
    assert(row_legs_0['leg_security_id_source'] == 56)
    assert(row_legs_0['leg_side'] == 1)
    assert(row_legs_0['leg_ratio_qty'] == 1)
    assert(row_legs_0['leg_price_mantissa'] == None)
    assert(row_legs_0['leg_price_exponent'] == -9)
    assert(row_legs_0['leg_option_delta_mantissa'] == None)
    assert(row_legs_0['leg_option_delta_exponent'] == -4)
    row_legs_1 = row['legs'][1]
    assert(row_legs_1['leg_security_id'] == 785711)
    assert(row_legs_1['leg_security_id_source'] == 56)
    assert(row_legs_1['leg_side'] == 2)
    assert(row_legs_1['leg_ratio_qty'] == 1)
    assert(row_legs_1['leg_price_mantissa'] == None)
    assert(row_legs_1['leg_price_exponent'] == -9)
    assert(row_legs_1['leg_option_delta_mantissa'] == None)
    assert(row_legs_1['leg_option_delta_exponent'] == -4)
    row_legs_2 = row['legs'][2]
    assert(row_legs_2['leg_security_id'] == 410559)
    assert(row_legs_2['leg_security_id_source'] == 56)
    assert(row_legs_2['leg_side'] == 2)
    assert(row_legs_2['leg_ratio_qty'] == 1)
    assert(row_legs_2['leg_price_mantissa'] == None)
    assert(row_legs_2['leg_price_exponent'] == -9)
    assert(row_legs_2['leg_option_delta_mantissa'] == None)
    assert(row_legs_2['leg_option_delta_exponent'] == -4)
    row_legs_3 = row['legs'][3]
    assert(row_legs_3['leg_security_id'] == 213412)
    assert(row_legs_3['leg_security_id_source'] == 56)
    assert(row_legs_3['leg_side'] == 1)
    assert(row_legs_3['leg_ratio_qty'] == 1)
    assert(row_legs_3['leg_price_mantissa'] == None)
    assert(row_legs_3['leg_price_exponent'] == -9)
    assert(row_legs_3['leg_option_delta_mantissa'] == None)
    assert(row_legs_3['leg_option_delta_exponent'] == -4)

    assert(len(row['events']) == 2)
    row_events_0 = row['events'][0]
    assert(row_events_0['event_type'] == 5)
    assert(row_events_0['event_time'] == 1559522218774000000)
    row_events_1 = row['events'][1]
    assert(row_events_1['event_type'] == 7)
    assert(row_events_1['event_time'] == 1559944740000000000)

    assert(len(row['md_feed_types']) == 1)
    row_md_feed_types_0 = row['md_feed_types'][0]
    assert(row_md_feed_types_0['md_feed_type'].decode() == "GBX")
    assert(row_md_feed_types_0['market_depth'] == 3)


    assert(len(row['inst_attrib']) == 1)
    row_inst_attrib_0 = row['inst_attrib'][0]
    assert(row_inst_attrib_0['inst_attrib_type'] == 24)
    assert(row_inst_attrib_0['inst_attrib_value'] == 287747)

    assert(len(row['lot_type_rules']) == 1)
    row_lot_type_rules_0 = row['lot_type_rules'][0]
    assert(row_lot_type_rules_0['lot_type'] == 2)
    assert(row_lot_type_rules_0['min_lot_size_mantissa'] == 10000)
    assert(row_lot_type_rules_0['min_lot_size_exponent'] == -4)

def assert_row_3(row):
    assert(row['min_price_increment_mantissa'] == 0)
    assert(row['min_price_increment_exponent'] == -9)
    assert(row['display_factor_mantissa'] == 10000000)
    assert(row['display_factor_exponent'] == -9)
    assert(row['price_ratio_mantissa'] == None)
    assert(row['price_ratio_exponent'] == -9)
    assert(row['trading_reference_price_mantissa'] == None)
    assert(row['trading_reference_price_exponent'] == -9)
    assert(row['high_limit_price_mantissa'] == None)
    assert(row['high_limit_price_exponent'] == -9)
    assert(row['low_limit_price_mantissa'] == None)
    assert(row['low_limit_price_exponent'] == -9)
    assert(row['max_price_variation_mantissa'] == None)
    assert(row['max_price_variation_exponent'] == -9)
    assert(row['match_event_indicator'] == 0)
    assert(row['tot_num_reports'] == None)
    assert(row['security_update_action'] == 65)
    assert(row['last_update_time'] == 1559522533373676329)
    assert(row['md_security_trading_status'] == None)
    assert(row['appl_id'] == 311)
    assert(row['market_segment_id'] == 54)
    assert(row['md_security_trading_status'] == None)
    assert(row['underlying_product'] == None)
    assert(row['security_exchange'].decode() == "XCME")
    assert(row['security_group'].decode() == "1V")
    assert(row['symbol'].decode() == "UD:1V: VT 0603941013")
    assert(row['security_id'] == 941013)
    assert(row['security_id_source'] == 56)
    assert(row['security_type'].decode() == "OOF")
    assert(row['cfi_code'].decode() == "OMEFXS")
    assert(row['maturity_month_year_year'] == 2019)
    assert(row['maturity_month_year_month'] == 6)
    assert(row['maturity_month_year_day'] == 1)
    assert(row['maturity_month_year_week'] == None)
    assert(row['currency'].decode() == "USD")
    assert(row['security_sub_type'].decode() == "VT")
    assert(row['user_defined_instrument'] == 89)
    assert(row['match_algorithm'] == 70)
    assert(row['min_trade_vol'] == 1)
    assert(row['max_trade_vol'] == 3000)
    assert(row['price_display_format'] == None)
    assert(row['tick_rule'] == 4)
    assert(row['unit_of_measure'].decode() == "IPNT")
    assert(row['settl_price_type'] == -128)
    assert(row['open_interest_qty'] == None)
    assert(row['cleared_volume'] == None)
    assert(row['main_fraction'] == None)
    assert(row['sub_fraction'] == None)
    assert(row['trading_reference_date'] == None)

    assert(len(row['legs']) == 2)
    row_legs_0 = row['legs'][0]
    assert(row_legs_0['leg_security_id'] == 486465)
    assert(row_legs_0['leg_security_id_source'] == 56)
    assert(row_legs_0['leg_side'] == 1)
    assert(row_legs_0['leg_ratio_qty'] == 1)
    assert(row_legs_0['leg_price_mantissa'] == None)
    assert(row_legs_0['leg_price_exponent'] == -9)
    assert(row_legs_0['leg_option_delta_mantissa'] == None)
    assert(row_legs_0['leg_option_delta_exponent'] == -4)
    row_legs_1 = row['legs'][1]
    assert(row_legs_1['leg_security_id'] == 617397)
    assert(row_legs_1['leg_security_id_source'] == 56)
    assert(row_legs_1['leg_side'] == 2)
    assert(row_legs_1['leg_ratio_qty'] == 1)
    assert(row_legs_1['leg_price_mantissa'] == None)
    assert(row_legs_1['leg_price_exponent'] == -9)
    assert(row_legs_1['leg_option_delta_mantissa'] == None)
    assert(row_legs_1['leg_option_delta_exponent'] == -4)

    assert(len(row['events']) == 2)
    row_events_0 = row['events'][0]
    assert(row_events_0['event_type'] == 5)
    assert(row_events_0['event_time'] == 1559522533373000000)
    row_events_1 = row['events'][1]
    assert(row_events_1['event_type'] == 7)
    assert(row_events_1['event_time'] == 1559937600000000000)

    assert(len(row['md_feed_types']) == 1)
    row_md_feed_types_0 = row['md_feed_types'][0]
    assert(row_md_feed_types_0['md_feed_type'].decode() == "GBX")
    assert(row_md_feed_types_0['market_depth'] == 3)


    assert(len(row['inst_attrib']) == 1)
    row_inst_attrib_0 = row['inst_attrib'][0]
    assert(row_inst_attrib_0['inst_attrib_type'] == 24)
    assert(row_inst_attrib_0['inst_attrib_value'] == 286727)

    assert(len(row['lot_type_rules']) == 2)
    row_lot_type_rules_0 = row['lot_type_rules'][0]
    assert(row_lot_type_rules_0['lot_type'] == 2)
    assert(row_lot_type_rules_0['min_lot_size_mantissa'] == 10000)
    assert(row_lot_type_rules_0['min_lot_size_exponent'] == -4)
    row_lot_type_rules_1 = row['lot_type_rules'][1]
    assert(row_lot_type_rules_1['lot_type'] == 3)
    assert(row_lot_type_rules_1['min_lot_size_mantissa'] == 500000)
    assert(row_lot_type_rules_1['min_lot_size_exponent'] == -4)

def assert_row_4(row):
    assert(row['min_price_increment_mantissa'] == 0)
    assert(row['min_price_increment_exponent'] == -9)
    assert(row['display_factor_mantissa'] == 10000000)
    assert(row['display_factor_exponent'] == -9)
    assert(row['price_ratio_mantissa'] == None)
    assert(row['price_ratio_exponent'] == -9)
    assert(row['trading_reference_price_mantissa'] == None)
    assert(row['trading_reference_price_exponent'] == -9)
    assert(row['high_limit_price_mantissa'] == None)
    assert(row['high_limit_price_exponent'] == -9)
    assert(row['low_limit_price_mantissa'] == None)
    assert(row['low_limit_price_exponent'] == -9)
    assert(row['max_price_variation_mantissa'] == None)
    assert(row['max_price_variation_exponent'] == -9)
    assert(row['match_event_indicator'] == 0)
    assert(row['tot_num_reports'] == None)
    assert(row['security_update_action'] == 65)
    assert(row['last_update_time'] == 1559522589267306053)
    assert(row['md_security_trading_status'] == None)
    assert(row['appl_id'] == 311)
    assert(row['market_segment_id'] == 54)
    assert(row['md_security_trading_status'] == None)
    assert(row['underlying_product'] == None)
    assert(row['security_exchange'].decode() == "XCME")
    assert(row['security_group'].decode() == "1V")
    assert(row['symbol'].decode() == "UD:1V: IC 0603941015")
    assert(row['security_id'] == 941015)
    assert(row['security_id_source'] == 56)
    assert(row['security_type'].decode() == "OOF")
    assert(row['cfi_code'].decode() == "OMEFXS")
    assert(row['maturity_month_year_year'] == 2019)
    assert(row['maturity_month_year_month'] == 6)
    assert(row['maturity_month_year_day'] == 1)
    assert(row['maturity_month_year_week'] == None)
    assert(row['currency'].decode() == "USD")
    assert(row['security_sub_type'].decode() == "IC")
    assert(row['user_defined_instrument'] == 89)
    assert(row['match_algorithm'] == 70)
    assert(row['min_trade_vol'] == 1)
    assert(row['max_trade_vol'] == 3000)
    assert(row['price_display_format'] == None)
    assert(row['tick_rule'] == 4)
    assert(row['unit_of_measure'].decode() == "IPNT")
    assert(row['settl_price_type'] == -128)
    assert(row['open_interest_qty'] == None)
    assert(row['cleared_volume'] == None)
    assert(row['main_fraction'] == None)
    assert(row['sub_fraction'] == None)
    assert(row['trading_reference_date'] == None)

    assert(len(row['legs']) == 4)
    row_legs_0 = row['legs'][0]
    assert(row_legs_0['leg_security_id'] == 598515)
    assert(row_legs_0['leg_security_id_source'] == 56)
    assert(row_legs_0['leg_side'] == 2)
    assert(row_legs_0['leg_ratio_qty'] == 1)
    assert(row_legs_0['leg_price_mantissa'] == None)
    assert(row_legs_0['leg_price_exponent'] == -9)
    assert(row_legs_0['leg_option_delta_mantissa'] == None)
    assert(row_legs_0['leg_option_delta_exponent'] == -4)
    row_legs_1 = row['legs'][1]
    assert(row_legs_1['leg_security_id'] == 729879)
    assert(row_legs_1['leg_security_id_source'] == 56)
    assert(row_legs_1['leg_side'] == 1)
    assert(row_legs_1['leg_ratio_qty'] == 1)
    assert(row_legs_1['leg_price_mantissa'] == None)
    assert(row_legs_1['leg_price_exponent'] == -9)
    assert(row_legs_1['leg_option_delta_mantissa'] == None)
    assert(row_legs_1['leg_option_delta_exponent'] == -4)
    row_legs_2 = row['legs'][2]
    assert(row_legs_2['leg_security_id'] == 469534)
    assert(row_legs_2['leg_security_id_source'] == 56)
    assert(row_legs_2['leg_side'] == 1)
    assert(row_legs_2['leg_ratio_qty'] == 1)
    assert(row_legs_2['leg_price_mantissa'] == None)
    assert(row_legs_2['leg_price_exponent'] == -9)
    assert(row_legs_2['leg_option_delta_mantissa'] == None)
    assert(row_legs_2['leg_option_delta_exponent'] == -4)
    row_legs_3 = row['legs'][3]
    assert(row_legs_3['leg_security_id'] == 124670)
    assert(row_legs_3['leg_security_id_source'] == 56)
    assert(row_legs_3['leg_side'] == 2)
    assert(row_legs_3['leg_ratio_qty'] == 1)
    assert(row_legs_3['leg_price_mantissa'] == None)
    assert(row_legs_3['leg_price_exponent'] == -9)
    assert(row_legs_3['leg_option_delta_mantissa'] == None)
    assert(row_legs_3['leg_option_delta_exponent'] == -4)

    assert(len(row['events']) == 2)
    row_events_0 = row['events'][0]
    assert(row_events_0['event_type'] == 5)
    assert(row_events_0['event_time'] == 1559522589267000000)
    row_events_1 = row['events'][1]
    assert(row_events_1['event_type'] == 7)
    assert(row_events_1['event_time'] == 1559592000000000000)

    assert(len(row['md_feed_types']) == 1)
    row_md_feed_types_0 = row['md_feed_types'][0]
    assert(row_md_feed_types_0['md_feed_type'].decode() == "GBX")
    assert(row_md_feed_types_0['market_depth'] == 3)


    assert(len(row['inst_attrib']) == 1)
    row_inst_attrib_0 = row['inst_attrib'][0]
    assert(row_inst_attrib_0['inst_attrib_type'] == 24)
    assert(row_inst_attrib_0['inst_attrib_value'] == 286979)

    assert(len(row['lot_type_rules']) == 1)
    row_lot_type_rules_0 = row['lot_type_rules'][0]
    assert(row_lot_type_rules_0['lot_type'] == 2)
    assert(row_lot_type_rules_0['min_lot_size_mantissa'] == 10000)
    assert(row_lot_type_rules_0['min_lot_size_exponent'] == -4)

def run_test(sparkSession):
    data_for_test = sample_collection_from_test_files(sparkSession, [ \
            ['/test_decoded_data/test-pico-md-instrument-definition-spread56.parquet',[21,37,52,68, 70]]])
    assert_row_0(data_for_test[0])
    assert_row_1(data_for_test[1])
    assert_row_2(data_for_test[2])
    assert_row_3(data_for_test[3])
    assert_row_4(data_for_test[4])
